// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var ngTarget;

  ngTarget = function($parse, $timeout) {
    var NON_ASSIGNABLE_MODEL_EXPRESSION;
    NON_ASSIGNABLE_MODEL_EXPRESSION = "Non-assignable model expression: ";
    return {
      restrict: "A",
      link: function(scope, element, attr) {
        var blur, blurTrigger, blurTriggerName, buildGetterSetter, focus, focusTrigger, focusTriggerName, select, selectTrigger, selectTriggerName;
        buildGetterSetter = function(name) {
          var me;
          me = {};
          me.get = $parse(name);
          me.set = me.get.assign;
          if (!me.set) {
            throw Error(NON_ASSIGNABLE_MODEL_EXPRESSION + name);
          }
          return me;
        };
        focusTriggerName = attr.ngTarget + "._focusTrigger";
        focusTrigger = buildGetterSetter(focusTriggerName);
        focus = buildGetterSetter(attr.ngTarget + ".focus");
        focusTrigger.set(scope, 0);
        focus.set(scope, function() {
          return focusTrigger.set(scope, 1);
        });
        scope.$watch(focusTriggerName, function(newValue, oldValue) {
          if (newValue > 0) {
            return $timeout((function() {
              element[0].focus();
              return focusTrigger.set(scope, 0);
            }), 50);
          }
        });
        blurTriggerName = attr.ngTarget + "._blurTrigger";
        blurTrigger = buildGetterSetter(blurTriggerName);
        blur = buildGetterSetter(attr.ngTarget + ".blur");
        blurTrigger.set(scope, 0);
        blur.set(scope, function() {
          return blurTrigger.set(scope, 1);
        });
        scope.$watch(blurTriggerName, function(newValue, oldValue) {
          if (newValue > 0) {
            return $timeout((function() {
              element[0].blur();
              return blurTrigger.set(scope, 0);
            }), 50);
          }
        });
        selectTriggerName = attr.ngTarget + "._selectTrigger";
        selectTrigger = buildGetterSetter(selectTriggerName);
        select = buildGetterSetter(attr.ngTarget + ".select");
        selectTrigger.set(scope, 0);
        select.set(scope, function() {
          return selectTrigger.set(scope, 1);
        });
        return scope.$watch(selectTriggerName, function(newValue, oldValue) {
          if (newValue > 0) {
            return $timeout((function() {
              element[0].select();
              return selectTrigger.set(scope, 0);
            }), 50);
          }
        });
      }
    };
  };

  angular.module(window.kulebaoApp).directive('ngTarget', ngTarget);

}).call(this);
